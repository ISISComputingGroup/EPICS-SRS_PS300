##########################################################################
# Copyright (c) 2012 Lawrence Berkeley National Laboratory, Accelerator
# Technology Group, Engineering Division
# This code is distributed subject to a Software License Agreement found
# in file LICENSE that is included with this distribution.
##########################################################################

record(waveform, "$(P)IDN")
{
    field(DESC, "SCPI identification string")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getIDN(79) $(PORT) $(A)")
    field(PINI, "YES")
    field(FTVL, "CHAR")
    field(NELM, "80")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:IDN")
}
record(longin, "$(P)ESR")
{
    field(DESC, "SCPI get event status")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getD(*ESR) $(PORT) $(A)")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ESR")
}

record(bo, "$(P)TRIP:CLEAR")
{
    field(DESC, "Clear a trip")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto cmd(TCLR) $(PORT) $(A)")
    field(ZNAM, "Clear")
    field(ONAM, "Clear")
    field(FLNK, "$(P)STB")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:TRIP:CLEAR PP")
}
record(bo, "$(P)HV:ENABLE")
{
    field(DESC, "Enable output")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto hvOffOn $(PORT) $(A)")
    field(ZNAM, "Turn Off")
    field(ONAM, "Turn On")
    field(FLNK, "$(P)STB")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:HV:ENABLE PP")
}
record(ao, "$(P)HV:SP")
{
    field(DESC, "Set output voltage")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto setting(VSET) $(PORT) $(A)")
    field(EGU,  "V")
    field(LOPR, "$(VMIN)")
    field(HOPR, "$(VMAX)")
    field(DRVL, "$(VMIN)")
    field(DRVH, "$(VMAX)")
    field(PREC, "4")
    field(FLNK, "$(P)VOLTAGE")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:HV:SP PP")
}
record(ao, "$(P)VLIM:SP")
{
    field(DESC, "Set output voltage limit")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto setting(VLIM) $(PORT) $(A)")
    field(EGU,  "V")
    field(LOPR, "$(VMIN)")
    field(HOPR, "$(VMAX)")
    field(DRVL, "$(VMIN)")
    field(DRVH, "$(VMAX)")
    field(PREC, "3")
    field(FLNK, "$(P)VLIM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VLIM:SP:PP")
}
record(ai, "$(P)VLIM")
{
    field(DESC, "Get output voltage limit")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getF(VLIM) $(PORT) $(A)")
    field(EGU,  "V")
    field(LOPR, "$(VMIN)")
    field(HOPR, "$(VMAX)")
    field(PREC, "3")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VLIM")
}
record(ao, "$(P)ILIM:SP")
{
    field(DESC, "Set output current limit")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto setting(ILIM) $(PORT) $(A)")
    field(EGU,  "A")
    field(LOPR, "$(IMIN)")
    field(HOPR, "$(IMAX)")
    field(DRVL, "$(IMIN)")
    field(DRVH, "$(IMAX)")
    field(PREC, "3")
    field(FLNK, "$(P)ILIM")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ILIM:SP PP")
}
record(ai, "$(P)ILIM")
{
    field(DESC, "Get output current limit")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getF(ILIM) $(PORT) $(A)")
    field(EGU,  "A")
    field(LOPR, "$(IMIN)")
    field(HOPR, "$(IMAX)")
    field(PREC, "3")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ILIM")
}
record(ao, "$(P)ITRP:SP")
{
    field(DESC, "Set output current trip limit")
    field(DTYP, "stream")
    field(OUT,  "@ps300.proto setting(ITRP) $(PORT) $(A)")
    field(EGU,  "A")
    field(LOPR, "0")
    field(HOPR, "$(IMAX)")
    field(DRVL, "$(IMIN)")
    field(DRVH, "$(IMAX)")
    field(PREC, "3")
    field(FLNK, "$(P)ITRP")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ITRP:SP PP")
}
record(ai, "$(P)ITRP")
{
    field(DESC, "Get output current trip limit")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getF(ITRP) $(PORT) $(A)")
    field(EGU,  "A")
    field(LOPR, "0")
    field(HOPR, "$(IMAX)")
    field(PREC, "3")
    field(PINI, "YES")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:ITRP")
}

#
# Dummy record to trigger readbacks
#
record(seq, "$(P)POLL:RB")
{
    field(DESC, "Head of readback chain")
    field(PINI, "YES")
    field(SCAN, "1 second")
    field(LNK1, "$(P)STB.PROC")
    field(LNK2, "$(P)VOLTAGE.PROC")
    field(LNK3, "$(P)CURRENT.PROC")
}

record(mbbiDirect, "$(P)STB")
{
    field(DESC, "SCPI get status byte")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getD(*STB) $(PORT) $(A)")
    field(FLNK, "$(P)HVON:STAT")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:STB")
}
record(bi, "$(P)HVON:STAT")
{
    field(DESC, "Is HV on?")
    field(INP,  "$(P)STB.B7 NPP MS")
    field(ZNAM, "Off")
    field(ONAM, "On")
    field(FLNK, "$(P)ILIM:STAT")
}
record(bi, "$(P)ILIM:STAT")
{
    field(DESC, "Is current limited?")
    field(INP,  "$(P)STB.B3 NPP MS")
    field(ZNAM, "No limit")
    field(ONAM, "Limited")
    field(FLNK, "$(P)ITRIP:STAT")
}
record(bi, "$(P)ITRIP:STAT")
{
    field(DESC, "Tripped on overcurrent?")
    field(INP,  "$(P)STB.B2 NPP MS")
    field(ZNAM, "Not tripped")
    field(ONAM, "Tripped")
    field(FLNK, "$(P)VTRIP:STAT")
}
record(bi, "$(P)VTRIP:STAT")
{
    field(DESC, "Tripped on overvoltage?")
    field(INP,  "$(P)STB.B1 NPP MS")
    field(ZNAM, "Not tripped")
    field(ONAM, "Tripped")
    field(FLNK, "$(P)HVSTABLE:STAT")
}
record(bi, "$(P)HVSTABLE:STAT")
{
    field(DESC, "HV stable?")
    field(INP,  "$(P)STB.B0 NPP MS")
    field(ZNAM, "Unstable")
    field(ONAM, "Stable")
}
record(ai, "$(P)VOLTAGE")
{
    field(DESC, "Output voltage readback")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getF(VOUT) $(PORT) $(A)")
    field(EGU,  "V")
    field(LOPR, "$(VMIN)")
    field(HOPR, "$(VMAX)")
    field(PREC, "4")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:VOLTAGE")
}
record(ai, "$(P)CURRENT")
{
    field(DESC, "Output current readback")
    field(DTYP, "stream")
    field(INP,  "@ps300.proto getF(IOUT) $(PORT) $(A)")
    field(EGU,  "A")
    field(LOPR, "0")
    field(HOPR, "500.0e-6")
    field(PREC, "4")
    field(SIML, "$(P)SIM")
    field(SIOL, "$(P)SIM:CURRENT")
}
